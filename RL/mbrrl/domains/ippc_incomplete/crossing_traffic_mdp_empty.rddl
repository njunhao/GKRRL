////////////////////////////////////////////////////////////////////
//
// Crossing Traffic Robot Navigation
//
// Author: Sungwook Yoon (sungwook.yoon [at] gmail.com)
//
// Modified for competition and translation purposes by Scott Sanner.
//
// State action constraints added by Thomas Keller 
// (tkeller [at] informatik.uni-freiburg.de)
//
// In a grid, a robot (R) must get to a goal (G) and avoid obstacles (O)
// arriving randomly and moving left.  If an obstacle overlaps with the
// robot, the robot disappears and can no longer move around.  The robot
// can "duck" underneath a car by deliberately moving right/east when
// a car is to the right of it (this can make the solution interesting...
// the robot should start at the left side of the screen then).  The robot
// receives -1 for every time step it has not reached the goal.  The goal
// state is absorbing with 0 reward.
//
// ****************
// *            R * 
// *  <-O <-O <-O *
// *    <-O   <-O *
// * <-O    <-O   *
// *     <-O  <-O *
// *            G *
// ****************
//
// You can think of this as the RDDL version of Frogger:
//
//   http://en.wikipedia.org/wiki/Frogger
//
////////////////////////////////////////////////////////////////////

domain crossing_traffic_mdp {
	requirements = {
//		constrained-state,
		reward-deterministic
	};
	
	types {
		xpos : object;
		ypos : object;
	};
	
	pvariables {

		NORTH(ypos, ypos) : {non-fluent, bool, default = false};
		SOUTH(ypos, ypos) : {non-fluent, bool, default = false};
		EAST(xpos, xpos)  : {non-fluent, bool, default = false};
		WEST(xpos, xpos)  : {non-fluent, bool, default = false};

		MIN-XPOS(xpos) : {non-fluent, bool, default = false};
		MAX-XPOS(xpos) : {non-fluent, bool, default = false};
		MIN-YPOS(ypos) : {non-fluent, bool, default = false};
		MAX-YPOS(ypos) : {non-fluent, bool, default = false};
	
		INPUT-RATE : {non-fluent, real, default = 0.2};
		
		GOAL(xpos,ypos) : {non-fluent, bool, default = false};
		
		// Fluents
		robot-at(xpos, ypos)    : {state-fluent, bool, default = false};
		obstacle-at(xpos, ypos) : {state-fluent, bool, default = false};
		
		// Actions
		move-north : {action-fluent, bool, default = false};
		move-south : {action-fluent, bool, default = false};
		move-east  : {action-fluent, bool, default = false};
		move-west  : {action-fluent, bool, default = false};
	};
	
	cpfs {
	
		robot-at'(?x,?y) = robot-at(?x,?y);
			
		obstacle-at'(?x, ?y) = obstacle-at(?x,?y);
				
	};
	
	// 0 reward for reaching goal, -1 in all other cases
	reward = [sum_{?x : xpos, ?y : ypos} -(GOAL(?x,?y) ^ ~robot-at(?x,?y))]; 
	
}
