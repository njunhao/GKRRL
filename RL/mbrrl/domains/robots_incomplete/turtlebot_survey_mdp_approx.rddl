domain turtlebot_survey_mdp {
    
    types {
        waypoint: object;
        robot: object;
        obj: object;
    };

    pvariables {
        // Action costs and penalties
        COST_MOVE: {non-fluent, real, default = -1.0};
        COST_LOCALISE: {non-fluent, real, default = -1.0};
        COST_DOCK: {non-fluent, real, default = -1.0};
        COST_UNDOCK: {non-fluent, real, default = -1.0};
        COST_SURVEY: {non-fluent, real, default = -1.0};
        COST_INSPECTION: {non-fluent, real, default = -1.0};
        COST_TRANSMIT: {non-fluent, real, default = -1.0};
        COST_CALIBRATE: {non-fluent, real, default = -1.0};
        TASK_REWARD: {non-fluent, real, default = 10.0};
        PROB_LOSING_LOCALISATION : {non-fluent, real, default = 0.0};
        PROB_POOR_CALIBRATION : {non-fluent, real, default = 0.0};
        PROB_LOW_ENERGY : {non-fluent, real, default = 0.0};
        PROB_SUCCESSFUL_SURVEY : {non-fluent, real, default = 1.0};
        PROB_SUCCESSFUL_OBSERVATION : {non-fluent, real, default = 1.0};
        PROB_SUCCESSFUL_SURVEY_DAMAGED : {non-fluent, real, default = 1.0};
        PROB_SUCCESSFUL_OBSERVATION_DAMAGED : {non-fluent, real, default = 1.0};

        // Non-fluents
        DOCK_AT(waypoint): {non-fluent, bool, default = false };
        COMM_TOWER(waypoint): {non-fluent, bool, default = false };
        OBJECT_AT(obj, waypoint) : {non-fluent, bool, default = false};

        // State fluents
        robot_at(robot, waypoint): {state-fluent, bool, default = false};
        undocked(robot): {state-fluent, bool, default = false };
        docked(robot): {state-fluent, bool, default = false };
        localised(robot): {state-fluent, bool, default = false };
        object_found(robot, obj) : {state-fluent, bool, default = false};
        object_inspected(robot, obj) : {state-fluent, bool, default = false};
        object_info_received(obj) : {state-fluent, bool, default = false};
        camera_calibrated(robot) : {state-fluent, bool, default = false};
        has_energy(robot): {state-fluent, bool, default = false};
        low_energy(robot): {state-fluent, bool, default = false};
        reward_received(obj): {state-fluent, bool, default = false};

        // Action fluents
        move(robot, waypoint): {action-fluent, bool, default = false};
        localise(robot): {action-fluent, bool, default = false};
        dock(robot, waypoint): {action-fluent, bool, default = false};
        undock(robot, waypoint): {action-fluent, bool, default = false};
        survey(robot, waypoint): {action-fluent, bool, default = false};
        inspect_object(robot, obj): {action-fluent, bool, default = false};
        transmit_info(robot): {action-fluent, bool, default = false};
        calibrate_camera(robot) : {action-fluent, bool, default = false};
    };

    cpfs {
        robot_at'(?r, ?loc) = robot_at(?r, ?loc);
        // robot_at'(?r, ?loc) = 
        //         KronDelta(
        //             [~robot_at(?r, ?loc) ^ move(?r, ?loc)] | 
        //             [robot_at(?r, ?loc) ^ ~(exists_{?loc1: waypoint} [move(?r, ?loc1) ^ ?loc ~= ?loc1])] );

        undocked'(?r) = undocked(?r);

        docked'(?r) = docked(?r);

        localised'(?r) = localised(?r);

        object_found'(?r, ?o) = object_found(?r, ?o);

        object_inspected'(?r, ?o) = object_inspected(?r, ?o);

        object_info_received'(?o) = object_info_received(?o);

        camera_calibrated'(?r) = camera_calibrated(?r);

        low_energy'(?r) = low_energy(?r);

        has_energy'(?r) = has_energy(?r);

        reward_received'(?o) =
            if (object_info_received(?o)) then true
            else reward_received(?o);
    };

    // Define cost for every action so that PROST can consider noop() cost as zero
    reward = [sum_{?r: robot, ?loc: waypoint} [COST_MOVE * move(?r, ?loc)]] +
             [sum_{?r: robot} [COST_LOCALISE * localise(?r)]] +
             [sum_{?r: robot, ?loc: waypoint} [COST_DOCK * dock(?r, ?loc)]] +
             [sum_{?r: robot, ?loc: waypoint} [COST_UNDOCK * undock(?r, ?loc)]] +
             [sum_{?r: robot, ?loc: waypoint} [COST_SURVEY * survey(?r, ?loc)]] +
             [sum_{?r: robot, ?o: obj} [COST_INSPECTION * inspect_object(?r, ?o)]] +
             [sum_{?r: robot} [COST_TRANSMIT * transmit_info(?r)]] +
             [sum_{?r: robot} [COST_CALIBRATE * calibrate_camera(?r)]] +
             [sum_{?o: obj} [TASK_REWARD * (~reward_received(?o) ^ object_info_received(?o)) ]];

    // PROST will consider noop() has cost of COST_MOVE
    // reward = [sum_{?r: robot}
    //             [COST_MOVE ]
    //          ] +
    //          [sum_{?o: obj} 
    //             [TASK_REWARD * (exists_{?r: robot} [ (transmit_info(?r) ^ object_inspected(?r, ?o) ^ ~object_info_received(?o)) ])]
    //          ];

    action-preconditions {
        
        forall_{?r: robot, ?loc: waypoint} [move(?r, ?loc) => (has_energy(?r) ^ undocked(?r) ^ ~robot_at(?r, ?loc))];
        
        // A robot can not move to its current position
        // forall_{?r: robot, ?from: waypoint, ?to: waypoint} [move(?r, ?from, ?to) => (?from ~= ?to)];

        // A robot can not be in two places at the same time
        forall_{?r: robot, ?loc1: waypoint, ?loc2: waypoint} [?loc1 == ?loc2 | (robot_at(?r, ?loc1) => ~robot_at(?r, ?loc2))];

        // Robot must be undocked to localise
        forall_{?r: robot} [localise(?r) => has_energy(?r) ^ undocked(?r)];

        // Robot must be docked to undock and vice-versa -> note: as we're using ?loc here, we must enforce the DOCK_AT to avoid instantiations of dock with wrong waypoints
        forall_{?r: robot, ?loc: waypoint} [dock(?r, ?loc) => (DOCK_AT(?loc) ^ robot_at(?r, ?loc))];         // allow docking even if no energy
        forall_{?r: robot, ?loc: waypoint} [undock(?r, ?loc) => (has_energy(?r) ^ DOCK_AT(?loc) ^ robot_at(?r, ?loc))];

        forall_{?r: robot, ?loc: waypoint} [survey(?r, ?loc) => has_energy(?r) ^ undocked(?r) ^ robot_at(?r, ?loc)]; 
        
        // deictic references in preconditions
        forall_{?r: robot, ?o: obj} [inspect_object(?r, ?o) => has_energy(?r) ^ undocked(?r)];
        forall_{?r: robot} [transmit_info(?r) => has_energy(?r)];
        forall_{?r: robot} [calibrate_camera(?r) => has_energy(?r)];
    };

    state-invariants {

        // Robot can't be docked and undocked at the same time
        forall_{?r: robot} [docked(?r) <=> ~undocked(?r)];
    };
}