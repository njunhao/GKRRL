////////////////////////////////////////////////////////////////////
// Skill Teaching Domain 
//
// Author: Tom Walsh (thomasjwalsh [at] gmail.com)
// Special thanks to Derek Green and Paul Cohen at 
// University of Arizona for help with the design.
//
// In the SkillTeaching MDP domain, the agent is trying to teach a series 
// of skills to a student through the use of hints and multiple choice
// questions.  The student has a proficiency level for each skill, which 
// indicates his ability to answer questions of that skill and positive
// reward is given for high proficiency on skills while negative reward 
// is given for low proficiency.  Each skill also has a weight on 
// how much it is worth. 
//
//  Many of the skills are connected in that some are
// ``pre-conditions'' of others.  If all of a skill's 
// pre-conditions are learned, the student has some probability 
// of answering questions about it right, and each precondition
// that is at high proficiency adds to the probability though 
// knowing all of them can lead to a probability higher than the sum
// of the components.  Hints only work if all the preconditions 
// are known and can only get you to medium proficiency.
//
// student proficiency increases with questions answered right and 
// decreases with questions about a skill answered wrong and 
// sometimes decreases by chance.
//
// To model the teacher-student interaction, every other step in the
// domain is the student's turn, where they answer a question.  
//
// The planning problems here are:
// 1) Whether or not to teach all the prerequisites of a skill before
//    teaching it.
// 2) What skill to focus on next
// 3) When to give hints and when to use multiple choice problems
//
////////////////////////////////////////////////////////////////////

domain skill_teaching_mdp {
  	
	requirements = { 
		reward-deterministic 
	};

	types { 
		skill : object;
	};
      	
	pvariables { 
		
		//how valuable is this skill?		
		SKILL_WEIGHT(skill) : { non-fluent, real, default = 1.0 };
		
		//some skills are pre-reqs for others.  Your ability to achiev a higher level skill is dependent on how 
		//many of the pre-reqs you have mastered
		PRE_REQ(skill, skill) : { non-fluent, bool, default = false };

		//probability of getting a question right if you have all the pre-reqs
		PROB_ALL_PRE(skill) : { non-fluent, real, default = 0.8 };
		//if you don't have all the pre-cons, probaility mass is summed using these individual pieces
		PROB_PER_PRE(skill) : { non-fluent, real, default = 0.1 };

		PROB_ALL_PRE_MED(skill) : { non-fluent, real, default = 1.0 };
		//if you don't have all the pre-cons, probaility mass is summed using these individual pieces
		PROB_PER_PRE_MED(skill) : { non-fluent, real, default = 0.3 };
		
		PROB_HIGH(skill) : { non-fluent, real, default = 0.9 };

		LOSE_PROB(skill) : { non-fluent, real, default = 0.02 };

		//proficiency values, they accumulate so low and med can be on at the same time and only high will turn off
		proficiencyMed(skill) : { state-fluent, bool, default = false };
		proficiencyHigh(skill) : { state-fluent, bool, default = false };

		updateTurn(skill) : {state-fluent, bool, default = false};

		answeredRight(skill): {state-fluent, bool, default = false};
		hintedRight(skill): {state-fluent, bool, default = false};
		hintDelayVar(skill) : {state-fluent, bool, default = false};
		
		//two actions.  Hint can get you directly to proficiencyMed, but only if all the pre_reqs are on
		askProb(skill) : {action-fluent, bool, default = false};
		giveHint(skill) :  {action-fluent, bool, default = false};
	};
  
	cpfs {

		updateTurn'(?s) = KronDelta( false );

		answeredRight'(?s) = KronDelta( false );

		hintedRight'(?s) = KronDelta( false );
			
		hintDelayVar'(?s) = KronDelta( false );

		proficiencyMed'(?s) = KronDelta( false );

		proficiencyHigh'(?s) = KronDelta( false );

	};
    
	 reward = [sum_{?s : skill} [SKILL_WEIGHT(?s) * proficiencyHigh(?s)]] + [sum_{?s : skill} -[SKILL_WEIGHT(?s) * ~proficiencyMed(?s)]];

}





