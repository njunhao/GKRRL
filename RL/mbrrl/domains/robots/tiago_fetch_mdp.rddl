domain tiago_fetch_mdp {

    types { 
        obj : object;
        robot : object;
        waypoint : object;
    };

    pvariables {
        TASK_REWARD : {non-fluent, real, default = 20.0};
        COST : {non-fluent, real, default = -1.0};
        PROB_LOSING_LOCALISATION(robot) : {non-fluent, real, default = 0};
        PROB_DROP_OBJ(obj): {non-fluent, real, default = 0};
        PROB_POOR_GRASP(obj): {non-fluent, real, default = 0};
        OBJECT_GOAL(obj, waypoint) : {non-fluent, bool, default = false};

        // drop_obj(robot, obj) : { state-fluent, bool, default = false};
        robot_at(robot, waypoint) : {state-fluent, bool, default = false};
        localised(robot) : {state-fluent, bool, default = false};
        emptyhand(robot) : {state-fluent, bool, default = false};
        holding(robot, obj) : {state-fluent, bool, default = false};
        poor_grasp(robot, obj) : {state-fluent, bool, default = false};
        object_at(obj, waypoint) : {state-fluent, bool, default = false};

        move(robot, waypoint) : {action-fluent, bool, default = false};
        localise(robot) : {action-fluent, bool, default = false};
        pick_up(robot, obj, waypoint) : {action-fluent, bool, default = false};
        put_down(robot, obj, waypoint) : {action-fluent, bool, default = false};
    };

    cpfs {
//      ROSPlan can't parse this CPF
//        robot_at'(?r, ?loc) = 
//                KronDelta(
//                    [~robot_at(?r, ?loc) ^ move(?r, ?loc) ^ localised(?r)] | 
//                    [robot_at(?r, ?loc) ^ ~(exists_{?loc1: waypoint} [move(?r, ?loc1) ^ localised(?r) ^ ?loc ~= ?loc1])] );

        robot_at'(?r, ?loc) = 
                if (~robot_at(?r, ?loc) ^ move(?r, ?loc) ^ localised(?r)) then true 
                else if (exists_{?loc1: waypoint} [(robot_at(?r, ?loc) ^ move(?r, ?loc1) ^ localised(?r))]) then false
                else robot_at(?r, ?loc);

        localised'(?r) =
                if (localise(?r)) then true
                else if (exists_{?loc: waypoint} [move(?r, ?loc)]) then (Bernoulli (1-PROB_LOSING_LOCALISATION(?r)))
                else localised(?r);

        emptyhand'(?r) = 
                if (exists_{?o: obj, ?loc: waypoint} [pick_up(?r, ?o, ?loc)]) then false
                else if (exists_{?o: obj, ?loc: waypoint} [put_down(?r, ?o, ?loc)]) then true
                else if (exists_{?o: obj} [holding(?r, ?o)]) then false
                else true;

        poor_grasp'(?r, ?o) =
                // if (drop_obj(?r, ?o)) then false
                if (exists_{?loc: waypoint} [pick_up(?r, ?o, ?loc)]) then Bernoulli(PROB_POOR_GRASP(?o))
                else if (exists_{?loc: waypoint} [put_down(?r, ?o, ?loc)]) then false
                else if (~holding(?r, ?o)) then false
                else poor_grasp(?r, ?o);

        holding'(?r, ?o) =
                if (exists_{?loc: waypoint} [pick_up(?r, ?o, ?loc)]) then true
                else if (exists_{?loc: waypoint} [put_down(?r, ?o, ?loc)]) then false
                else if (holding(?r, ?o) ^ poor_grasp(?r, ?o)) then (Bernoulli (1-PROB_DROP_OBJ(?o)))
                else holding(?r, ?o);

        // drop_obj'(?r, ?o) =  
        //         if (holding(?r, ?o) ^ poor_grasp(?r, ?o)) then (Bernoulli (PROB_DROP_OBJ(?o)))
        //         else false;

        object_at'(?o, ?loc) =
                if (exists_{?r: robot} [pick_up(?r, ?o, ?loc)]) then false
                else if (exists_{?r: robot} [put_down(?r, ?o, ?loc)]) then true
                // else if (exists_{?r: robot} [holding(?r, ?o) ^ robot_at(?r, ?loc) ^ drop_obj(?r, ?o)]) then true   // once object drop, lost forever
                else object_at(?o, ?loc);
    };

    // PROST can't interpret object_at'(?o, ?loc) in reward function, affects calcReward()
    // reward = [sum_{?o: obj} [TASK_REWARD * (task_completed(?o) ^ ~reward_received(?o)) - TASK_REWARD * (~task_completed(?o) ^ reward_received(?o))]] + COST;

    reward = [sum_{?o: obj} 
                 [ TASK_REWARD * (exists_{?r: robot, ?loc: waypoint} [ (put_down(?r, ?o, ?loc) ^ OBJECT_GOAL(?o, ?loc)) ]) -
                   TASK_REWARD * (exists_{?r: robot, ?loc: waypoint} [ (pick_up(?r, ?o, ?loc) ^ OBJECT_GOAL(?o, ?loc)) ])
                 ]
             ] +
             [sum_{?r: robot, ?loc: waypoint} [COST * move(?r, ?loc)]] +
             [sum_{?r: robot} [COST * localise(?r)]] +
             [sum_{?r: robot, ?o: obj, ?loc: waypoint} [COST * pick_up(?r, ?o, ?loc)]] +
             [sum_{?r: robot, ?o: obj, ?loc: waypoint} [COST * put_down(?r, ?o, ?loc)]];
    
    // reward = 
    //          [ TASK_REWARD * (forall_{?o: obj} [ exists_{?loc: waypoint} [(object_at(?o, ?loc) ^ OBJECT_GOAL(?o, ?loc))] ] )
    //            TASK_REWARD * (exists_{?r: robot, ?loc: waypoint} [ (object_at(?o, ?loc) ^ OBJECT_GOAL(?o, ?loc)) ])
    //          ]
    
    action-preconditions {
        forall_{?r: robot, ?loc: waypoint} [move(?r, ?loc) => (localised(?r) ^ ~robot_at(?r, ?loc))];
        // forall_{?r: robot} [localise(?r) => (~localised(?r))];
        forall_{?r: robot, ?o: obj, ?loc: waypoint} [pick_up(?r, ?o, ?loc) => (robot_at(?r, ?loc) ^ object_at(?o, ?loc) ^ emptyhand(?r))];
        // at most one object allowed at each waypoint
        forall_{?r: robot, ?o: obj, ?loc: waypoint} [put_down(?r, ?o, ?loc) => (robot_at(?r, ?loc) ^ holding(?r, ?o) ^ ~(exists_{?o1: obj} [object_at(?o1, ?loc)]) )];
        // forall_{?r: robot, ?o: obj, ?loc: waypoint} [put_down(?r, ?o, ?loc) => (robot_at(?r, ?loc) ^ holding(?r, ?o))];
    };
}