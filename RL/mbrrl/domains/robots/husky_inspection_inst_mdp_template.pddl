(define (problem task)
(:domain husky_inspection_mdp)
(:objects wp0 wp1 wp2 wp3 wp4 wp5 wp6 wp7 wp8 wp9 wp10 wp11 wp12 - waypoint r1 - robot poi_valve1 poi_valve2 poi_valve3 poi_valve4 poi_valve5 poi1 poi2 poi3 poi4 poi5 - obj)
(:init
    ; (TASK_REWARD)
    ; (COST_MOVE r1)
    ; (COST_LOCATE_POI r1)
    ; (COST_INSPECT_POI r1)
    ; (COST_TAKE_IMAGE r1)
    ; (COST_MANIPULATE_VALVE r1)
    ; (COST_REPAIR_CAMERA r1)
    ; (COST_REPAIR_MANIPULATOR r1)

    ; (PROB_LOCALISED r1)
    ; (PROB_FOUND_DAMAGED r1 poi_valve1)
    ; (PROB_FOUND r1 poi_valve1)
    ; (PROB_INSPECTED_DAMAGED r1 poi_valve1)
    ; (PROB_INSPECTED r1 poi_valve1)
    ; (PROB_IMAGE_TAKEN_DAMAGED r1 poi_valve1)
    ; (PROB_IMAGE_TAKEN r1 poi_valve1)
    ; (PROB_VALVE_TURNED_DAMAGED r1 poi_valve1)
    ; (PROB_VALVE_TURNED r1 poi_valve1)
    ; (PROB_DAMAGED_MANIPULATOR r1)
    ; (PROB_DAMAGED_CAMERA r1)

    (GOAL_POI_INSPECTED poi_valve1)
    (GOAL_VALVE_TURNED poi_valve1)
    (GOAL_POI_IMAGE_TAKEN poi_valve1)
    ; (close_to wp0 wp1)
    (POI_AT poi_valve1 wp0)
    (BASE wp0)
    (VALVE_AT poi_valve1)

    (at r1 wp0)

    ; add dummy predicate else this predicate will not be loaded into LFIT if it does not appear in domain precond/effect
    (holding r1 o1)
    (holding r1 o2)
    (localised r1)
    (poi_found r1 poi1)
    (poi_inspected r1 poi1)
    (poi_image_taken r1 poi1)
    (poi_valve_turned r1 poi1)
    (damaged_manipulator r1)
    (damaged_camera r1)
    (reward_received_for_inspection poi1)
    (reward_received_for_manipulation poi1)
    (reward_received_for_image_taken poi1)
)
; add predicates that are non-fluents as constants, this will be parsed by LFIT and printed correctly as non-fluent in cpfs
(:constants
    ; (TASK_REWARD)
    ; (COST_MOVE r1)
    ; (COST_LOCATE_POI r1)
    ; (COST_INSPECT_POI r1)
    ; (COST_TAKE_IMAGE r1)
    ; (COST_MANIPULATE_VALVE r1)
    ; (COST_REPAIR_CAMERA r1)
    ; (COST_REPAIR_MANIPULATOR r1)

    (PROB_LOCALISED r1)
    (PROB_FOUND_DAMAGED r1 poi_valve1)
    (PROB_FOUND r1 poi_valve1)
    (PROB_INSPECTED_DAMAGED r1 poi_valve1)
    (PROB_INSPECTED r1 poi_valve1)
    (PROB_IMAGE_TAKEN_DAMAGED r1 poi_valve1)
    (PROB_IMAGE_TAKEN r1 poi_valve1)
    (PROB_VALVE_TURNED_DAMAGED r1 poi_valve1)
    (PROB_VALVE_TURNED r1 poi_valve1)
    (PROB_DAMAGED_MANIPULATOR r1)
    (PROB_DAMAGED_CAMERA r1)

    (GOAL_POI_INSPECTED poi_valve1)
    (GOAL_VALVE_TURNED poi_valve1)
    (GOAL_POI_IMAGE_TAKEN poi_valve1)
    ; (close_to wp0 wp1)
    (POI_AT poi_valve1 wp0)
    (BASE wp0)
    (VALVE_AT poi_valve1)
)
(:goal (and
    (reward_received_for_inspection poi1)
    (reward_received_for_manipulation poi1)
    (reward_received_for_image_taken poi1)
))
  ;(:goal-reward 1)
  ;(:metric maximize (reward))
)